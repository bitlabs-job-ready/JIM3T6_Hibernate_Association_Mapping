In Hibernate, a many-to-many relationship can be mapped using the @ManyToMany annotation. This annotation is used to define a many-to-many relationship between two entities, where each entity has a collection of the other entity.

For example, consider the following two entities:


@Entity
public class Student {
  @Id
  private Long id;

  private String name;

  @ManyToMany
  @JoinTable(
    name = "student_courses",
    joinColumns = @JoinColumn(name = "student_id"),
    inverseJoinColumns = @JoinColumn(name = "course_id")
  )
  private List<Course> courses;
}

@Entity
public class Course {
  @Id
  private Long id;

  private String name;

  @ManyToMany(mappedBy = "courses")
  private List<Student> students;
}
In this example, the Student entity has a many-to-many relationship with the Course entity, as a student can enroll in multiple courses and a course can have multiple students. The @ManyToMany annotation is used to define this relationship on the courses field in the Student entity, and the @JoinTable annotation is used to specify the join table that connects the two entities. The joinColumns attribute specifies the foreign key column in the student_courses table that maps to the primary key of the students table, and the inverseJoinColumns attribute specifies the foreign key column in the student_courses table that maps to the primary key of the courses table.

On the other hand, the Course entity has a many-to-many relationship with the Student entity, as a course can have multiple students and a student can enroll in multiple courses. This relationship is defined using the @ManyToMany annotation on the students field in the Course entity, and the mappedBy attribute specifies that the courses field in the Student entity is the inverse side of the relationship.
